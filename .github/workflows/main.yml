#Simple CI CD pipeline (git commit  -> push backend container image to dockerhub, deploy to Heroku ->
#                                      pull backend container from docker hub ->
#                                      extract code from backend container and copy to /output on github runner ->
#                                      push /output to public_nuitinfo_2023 ->
#
#                                      push frontend container image to dockerhub, deploy to Heroku ->
#                                      pull frontend container from docker hub ->
#                                      extract code from frontend container and copy to /output on github runner ->
#                                      push /output to public_nuitinfo_2023

name: Simple CI CD pipeline for la nuit de l'info

on:
  push: 
    branches: ["reverse-cicd", "main"]
  pull_request:
    branches: ["main"]

env:
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
    API_TOKEN_GITHUB: "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"

jobs:
  push_backend_container_to_dockerhub:
    name: Push backend to dockerhub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Build docker image
        run: |
          cd server
          docker build -t nuitinfo_backend .
        
      - name: Push docker image to Dockerhub
        run: |
          docker tag nuitinfo_backend ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_backend
          docker push ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_backend


  push_frontend_container_to_dockerhub:
    name: Push frontend dockerhub
    runs-on: ubuntu-latest
    needs: [push_backend_container_to_dockerhub]
    steps:
      - uses: actions/checkout@v4

      - name: login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Build docker image
        run: |
          cd client
          docker build -t nuitinfo_frontend .

      - name: Push docker image to Dockerhub
        run: |
          docker tag nuitinfo_frontend ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_frontend
          docker push ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_frontend


  challenge_nuitinfo:
    name: Challenge Nuitinfo
    runs-on: ubuntu-latest
    needs: [push_frontend_container_to_dockerhub]
    steps:
      - uses: actions/checkout@v4

      - name: Pull docker image from Dockerhub
        run: |
          docker pull ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_backend
          docker run -itd --name backend_container ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_backend
          
          docker pull ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_frontend
          docker run -itd --name frontend_container ${{ env.DOCKERHUB_USERNAME }}/nuitinfo_frontend
          
          mkdir output
          mkdir output/server
          mkdir output/client

      - name: extract filesystem from docker container and copy to local file system of github runner
        run: |
          docker cp backend_container:/workspace/src output/server
          docker cp backend_container:/workspace/package.json output/server
          docker cp backend_container:/workspace/package-lock.json output/server
          docker cp backend_container:/workspace/uploads output/server
          docker cp backend_container:/workspace/.env output/server
          docker cp backend_container:/workspace/Dockerfile output/server

          docker cp frontend_container:/workspace/public output/client
          docker cp frontend_container:/workspace/src output/client
          docker cp frontend_container:/workspace/.dockerignore output/client
          docker cp frontend_container:/workspace/.eslintrc.json output/client
          docker cp frontend_container:/workspace/.gitignore output/client
          docker cp frontend_container:/workspace/.prettierignore output/client
          docker cp frontend_container:/workspace/.prettierrc.json output/client
          docker cp frontend_container:/workspace/Dockerfile output/client
          docker cp frontend_container:/workspace/jsconfig.json output/client
          docker cp frontend_container:/workspace/postcss.config.js output/client
          docker cp frontend_container:/workspace/tailwind.config.js output/client
          docker cp frontend_container:/workspace/package.json output/client
          docker cp frontend_container:/workspace/package-lock.json output/client
          
          cp ./README.md output

      - name: Pushes to another repository
        uses: cpina/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: 'output'
          destination-github-username: 'AnPatapain'
          destination-repository-name: 'public_nuitinfo_2023'
          user-email: nkalk192002@gmail.com
          target-branch: main

  deploy_backend_to_heroku:
    name: Deploy backend to heroku
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to heroku
        uses: akhileshns/heroku-deploy@v3.12.14 # This is the action
        with:
          heroku_api_key: "68cca895-d172-41ff-a3a1-67e439e77a9a"
          heroku_app_name: "nuitinfo-backend-dragon" #Must be unique in Heroku
          heroku_email: "ke_an.nguyen@insa-cvl.fr"
          appdir: "server"


  deploy_frontend_container_to_dockerhub:
    name: deploy frontend container to heroku
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy frontend to heroku
        uses: akhileshns/heroku-deploy@v3.12.14 # This is the action
        with:
          heroku_api_key: "68cca895-d172-41ff-a3a1-67e439e77a9a"
          heroku_app_name: "nuitinfo-frontend-dragon"
          heroku_email: "ke_an.nguyen@insa-cvl.fr"
          appdir: "client"
